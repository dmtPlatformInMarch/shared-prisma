generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                  String       @id
  role                Role         @default(INSTRUCTOR)
  name                String
  email               String
  created_at          DateTime     @default(now()) @db.Timestamptz(6)
  updated_at          DateTime     @default(now()) @db.Timestamptz(6)
  curriculum          Curriculum[]
  lesson              Lesson[]
  is_active           Boolean?     @default(true)
  plan                Plan         @default(FREE)
  uploaded_video_size Int          @default(0) // Size in MB

  // For instructors: list of tutors they assigned
  assigned_tutors CourseTutor[] @relation("InstructorToTutors")

  // For tutors: instructor who assigned them
  assigned_by CourseTutor[] @relation("TutorToInstructor")
}

model CourseTutor {
  id          String   @id @default(uuid())
  tutor_id    String
  assigner_id String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  tutor    Admin @relation("TutorToInstructor", fields: [tutor_id], references: [id])
  assigner Admin @relation("InstructorToTutors", fields: [assigner_id], references: [id])
}

model Users {
  id                       String                   @id
  name                     String
  role                     Role                     @default(USER)
  email                    String
  created_at               DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at               DateTime                 @default(now()) @db.Timestamptz(6)
  courses                  Enrollment[]
  course_related_questions CourseRelatedQuestions[]
  curriculum_rating        CurriculumRating[]
  comments                 Comment[]
  quiz_attempts            UserQuizAttempt[]
}

model Curriculum {
  curriculum_id            String                   @id @default(uuid())
  curriculum_name          String
  curriculum_description   String
  curriculum_duration      String
  curriculum_tags          String[]
  curriculum_order         String
  curriculum_requirements  String[]
  curriculum_learning      String[]
  curriculum_level         curriculum_level         @default(BEGINNER)
  category                 String
  curriculum_visibility    Visibility               @default(PRIVATE)
  curriculum_updated_at    DateTime                 @default(now()) @db.Timestamptz(6)
  curriculum_created_at    DateTime                 @default(now()) @db.Timestamptz(6)
  curriculum_course_number Int
  owner_id                 String
  curriculum_markdown      String?                  @default("")
  owner                    Admin                    @relation(fields: [owner_id], references: [id])
  enrollments              Enrollment[]
  sections                 Section[]
  course_related_questions CourseRelatedQuestions[]
  curriculum_rating        CurriculumRating[]
  curriculum_likes         CurriculumLikes[]
  curriculum_views         CurriculumViews[]
  average_views            Int                      @default(0) // Cached average views for optimization
  average_likes            Int                      @default(0) // Cached average likes for optimization
  average_rating           Float                    @default(0) // Cached average rating for optimization
  status                   Status                   @default(PENDING)
  curriculum_price         Float                    @default(0)
  curriculum_discount      Float                    @default(0)
  curriculum_price_type    PriceType                @default(FREE)
  currency                 String                   @default("KRW")
  is_paid                  Boolean                  @default(false)
  curriculum_password      String?
  private_link             String?                  @unique
  is_allowed               Boolean                  @default(false)
  website_discount         Boolean                  @default(false)
  Invite                   Invite[]
}

model Section {
  section_id    String     @id @default(uuid())
  title         String
  curriculum_id String
  curriculum    Curriculum @relation(fields: [curriculum_id], references: [curriculum_id])
  quizes        Quize? // Optional one-to-one relation to Quize  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  created_at    DateTime   @default(now())
  content       Content[]
}

model Content {
  content_id   String       @id @default(uuid())
  content_type ContentType
  lesson_id    String? //@unique // Enforces one-to-one
  text_id      String?      @unique // Enforces one-to-one
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  section_id   String
  // One-to-One Relation with Lesson
  lesson       Lesson?      @relation("ContentToLesson", fields: [lesson_id], references: [lesson_id])
  // One-to-One Relation with TextContent
  text         TextContent? @relation("ContentToText", fields: [text_id], references: [text_id])

  section       Section?       @relation(fields: [section_id], references: [section_id])
  watched_video WatchedVideo[]
}

model TextContent {
  text_id     String   @id @default(uuid())
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  content     Content? @relation("ContentToText")
}

model Quize {
  quize_id    String            @id @default(uuid())
  quize_title String
  quize_owner String
  section_id  String            @unique // Foreign key to Section.section_id
  section     Section           @relation(fields: [section_id], references: [section_id])
  questions   QuizQuestion[]
  created_at  DateTime          @default(now())
  updated_at  DateTime          @default(now())
  attempts    UserQuizAttempt[]
}

model QuizQuestion {
  question_id       String       @id @default(uuid())
  question          String
  quize_id          String
  quize             Quize        @relation(fields: [quize_id], references: [quize_id])
  options           QuizOption[]
  correct_option_id String
}

model QuizOption {
  option_id   String       @id @default(uuid())
  text        String
  question_id String
  question    QuizQuestion @relation(fields: [question_id], references: [question_id])
}

model UserQuizAttempt {
  attempt_id            String                  @id @default(uuid())
  user_id               String
  quize_id              String
  score                 Int
  total_wrong_answers   Int
  total_correct_answers Int
  total_questions       Int
  result                UserQuizAttemptAnswer[]
  completed_at          DateTime                @default(now())
  quiz                  Quize                   @relation(fields: [quize_id], references: [quize_id], onDelete: Cascade)
  user                  Users                   @relation(fields: [user_id], references: [id])
}

model UserQuizAttemptAnswer {
  id            String          @id @default(uuid())
  attempt_id    String
  option_name   String
  is_correct    Boolean
  attempt       UserQuizAttempt @relation(fields: [attempt_id], references: [attempt_id])
  question_name String
}

model Lesson {
  lesson_id          String     @id @default(uuid())
  lesson_name        String
  lesson_description String
  lesson_video       String
  lesson_duration    String
  lesson_thumbnail   String
  lesson_visibility  Visibility @default(PRIVATE)
  lesson_language    String
  lesson_updated_at  DateTime   @default(now()) @db.Timestamptz(6)
  lesson_created_at  DateTime   @default(now()) @db.Timestamptz(6)
  videoId            String?    @unique
  owner_id           String
  owner              Admin      @relation(fields: [owner_id], references: [id])
  subtitle           Subtitle[]
  content            Content[]  @relation("ContentToLesson")
}

model Invite {
  id          String   @id @default(uuid())
  email       String
  user_id     String? // Nullable until the user accepts and is created
  course_id   String // The course the user is being invited to
  is_accepted Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  // Relations
  course Curriculum @relation(fields: [course_id], references: [curriculum_id])

  @@unique([email, course_id, id]) // Prevent duplicate invites for the same course
}

model CurriculumViews {
  id            String     @id @default(uuid())
  userId        String
  curriculum    Curriculum @relation(fields: [curriculum_id], references: [curriculum_id])
  curriculum_id String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())

  @@unique([userId, curriculum_id], name: "user_curriculum_unique_views") // Ensures one view per user per curriculum
}

model CurriculumLikes {
  id            String     @id @default(uuid())
  userId        String
  curriculum    Curriculum @relation(fields: [curriculum_id], references: [curriculum_id])
  curriculum_id String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())

  @@unique([userId, curriculum_id], name: "user_curriculum_unique_like") // Ensures one like per user per curriculum
}

model CurriculumRating {
  id            String     @id @default(uuid())
  score         Int
  review        String? // Optional text review
  user          Users      @relation(fields: [user_id], references: [id])
  user_id       String
  curriculum    Curriculum @relation(fields: [curriculum_id], references: [curriculum_id])
  curriculum_id String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())

  @@unique([user_id, curriculum_id], name: "user_curriculum_unique__rating") // Ensures one rating per user per curriculum
}

model CourseRelatedQuestions {
  id             String           @id @default(uuid())
  question_title String
  body           String?
  course_id      String
  curriculum     Curriculum       @relation(fields: [course_id], references: [curriculum_id])
  owner_id       String
  owner          Users            @relation(fields: [owner_id], references: [id])
  comments       Comment[]
  is_report      Boolean          @default(false)
  likes          Likes[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  tags           String[]
  QuestionReport QuestionReport[]
}

model QuestionReport {
  id          String                 @id @default(uuid())
  question_id String
  reason      String
  question    CourseRelatedQuestions @relation(fields: [question_id], references: [id])
  owner_id    String
  is_report   Boolean                @default(true)
  created_at  DateTime               @default(now())
  updated_at  DateTime               @default(now())

  @@unique([owner_id, question_id], name: "user_question_unique_report")
}

model Comment {
  comment_id       String                 @id @default(uuid())
  comment_body     String
  comment_likes    String[]
  comment_owner_id String
  question_id      String
  question         CourseRelatedQuestions @relation(fields: [question_id], references: [id]) // 1 comment to 1
  comment_owner    Users                  @relation(fields: [comment_owner_id], references: [id]) // 1 comment owner to 1
  created_at       DateTime               @default(now())
  updated_at       DateTime               @default(now())
}

model Likes {
  id          String                 @id @default(uuid())
  like_owner  String
  question_id String
  question    CourseRelatedQuestions @relation(fields: [question_id], references: [id])
  created_at  DateTime               @default(now())
  updated_at  DateTime               @default(now())

  @@unique([like_owner, question_id], name: "user_question_unique_like")
}

model Subtitle {
  id         Int            @id @default(autoincrement())
  video_id   String
  language   String // Language of the subtitle (e.g., "English", "Spanish", "French", "German")
  file_url   String? // File URL or file path to the uploaded subtitle (optional if not uploaded yet)
  status     SubtitleStatus // Status of the subtitle upload
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  video Lesson @relation(fields: [video_id], references: [lesson_id])
}

model WatchedVideo {
  id             String     @id @default(uuid())
  enrollment_id  String
  content_id     String?
  isCompleted    Boolean    @default(false)
  percentage     Int        @default(0)
  watched_at     DateTime   @default(now())
  course_content Content?   @relation(fields: [content_id], references: [content_id])
  enrollment     Enrollment @relation(fields: [enrollment_id], references: [id])
  section_idx    Int        @default(0)
  quize_idx      String?
}

model Enrollment {
  id              String         @id @default(uuid())
  user_id         String
  course_id       String
  course_progress Int
  enrolled_at     DateTime       @default(now()) @db.Timestamptz(6)
  curriculum      Curriculum     @relation(fields: [course_id], references: [curriculum_id])
  user            Users          @relation(fields: [user_id], references: [id])
  watched_video   WatchedVideo[]
  is_rating       Boolean        @default(false)
  course_type     CourseType     @default(PUBLIC)

  @@unique([user_id, course_id], name: "user_course_unique_enrollment") // Ensures one enrollment per user per course
}

enum Role {
  INSTRUCTOR
  USER
  ROOT_ADMIN
  TUTOR
}

enum Visibility {
  PUBLIC
  PRIVATE
  PARTIALLY_PUBLIC
}

enum curriculum_level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum SubtitleStatus {
  WAITING
  IN_PROGRESS
  PUBLISHED
  CANCELED
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum PriceType {
  FREE
  PAID
}

enum ContentType {
  VIDEO
  TEXT
}

enum CourseType {
  PUBLIC
  PRIVATE
}

enum Plan {
  FREE
  STANDARD
  PREMIUM
}
